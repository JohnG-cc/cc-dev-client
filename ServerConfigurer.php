<?php


/**
 * Object representing the server to help make config.
 */
abstract class ServerConfigurer {

  const SERVICES = ['blogic', 'policy'];

  /**
   * Instantiate an object of the right class according the server software.
   * @return \class
   */
  static function create() : ServerConfigurer {
    $class = 'Server'.self::software();
    return new $class();
  }

  /**
   * Write the server file in the top level of this repository
   *
   * @return int
   *   the number of chars written
   */
  function setup() {
    global $nodes;
    $root = $this->nodeRoot();
    $conf = '#autogenerated by ServerConfigurer::setup in '.__FILE__."\n";
    foreach ($nodes as $node) {
      $conf .= $this->generateServerConf($node). "\n\n";
    }
    $this->write($conf);
    return $conf;
  }

  /**
   * Get the apache conf directives for the node.
   * @param Node $node
   * @return string
   *   The conf for that node.
   */
  private function generateServerConf(Node $node) : string {
    $host_name = $node->getHostname();
    $root = $this->nodeRoot() .'/'.$node->name;
    $vhosts = [];
    $vhosts[] = str_replace(
      ['__ROOT__', '__DIR__', '__SERVERNAME__', '__NODENAME__'],
      [$root, 'ledgerService', $host_name, $node->name],
      static::VHOST_TEMPLATE
    );
    $vhosts[] = '';
    foreach (static::SERVICES as $service) {
      $service_host =  strtolower($service).'.'.$host_name;
      $service_name = $service.'Service';
      $vhosts[] = str_replace(
        ['__ROOT__', '__DIR__', '__SERVERNAME__', '__NODENAME__'],
        [$root, $service_name, $service_host, $node->name],
        static::VHOST_TEMPLATE
      );
    }
    return implode("\n", $vhosts);
  }
  /**
   *
   * @param type $conf
   * @return string
   *   The conf for that node.
   */
  function write($conf) {
    $file = $this->getConfFile();
    if (file_exists($file))chmod($file, 0777);
    if (file_put_contents($this->getConfFile(), $conf)) {
      chmod($file, 0444);
      clientAddInfo("New virtualHosts have been added to $file. <strong>You MUST restart ".self::software()." before continuing.</strong>");
    }
    else {
      clientAddError("Failed to write to $file. Check file permissions and resubmit the form.");
    }
  }

  /**
   * Determine whether the server is Apache or Nginx
   * @return string
   */
  static function Software() :string {
    return ucfirst(substr($_SERVER['SERVER_SOFTWARE'], 0, strpos($_SERVER['SERVER_SOFTWARE'], '/')));
  }

  final function getConfFile() {
    return $this->NodeRoot().'/'.static::CONF_FILE;
  }

  final function nodeRoot() {
    return dirname(__DIR__);
  }

  /**
   * Get the hosts file entries for the node
   * @param Node name
   * @return string
   *   All the services on one line.
   */
  final function getNodeHosts(Node $node) {
    $hostname = $node->getHostname();
    $hosts = [$hostname];
    foreach (static::SERVICES as $service) {
      $hosts[] = strtolower($service).'.'.$hostname;
    }
    return "127.0.0.1\t".implode(' ', $hosts);
  }

  /**
   * Show lines needed in the hosts file.
   */
  function showHosts() {
    global $nodes;
    foreach ($nodes as $node_name => $node) {
      $hosts[$node_name] = $this->getNodeHosts($node);
    }
    clientAddInfo("Ensure your hosts file has the following lines:\n<pre>".implode("\n", $hosts)."</pre>");
  }

}

/**
 * Class to help build server config
 */
class ServerApache extends ServerConfigurer {
  const CONF_FILE = 'apache.conf';
  const VHOST_TEMPLATE = "<VirtualHost *:80>
  ServerName __SERVERNAME__
  DocumentRoot __ROOT__/__DIR__
  ErrorLog __ROOT__/cc_error.log
</VirtualHost>";
  //php_value session.cookie_domain .__NODENAME__ not currently used
}

class ServerNginx extends ServerConfigurer{
  const CONF_FILE = 'nginx.conf';
  const VHOST_TEMPLATE = '
server {
  listen 80;
  server_name __SERVERNAME__;
  access_log __ROOT__/cc_access.log;
  error_log __ROOT__/cc_error.log;
  location / {
    root __ROOT__/__DIR__/;
    index index.php;
    location ~ \.php(?:$|/) {
      try_files $uri =404;
      fastcgi_split_path_info ^(.+\.php)(/.+)$;
      fastcgi_pass unix:/var/run/php-fpm.sock;    #todo this needs to be configurable.
      fastcgi_index index.php;
      fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
      fastcgi_param SCRIPT_NAME $fastcgi_script_name;
      # fastcgi_params is a default conf file in /etc/nginx
      include fastcgi_params;
      fastcgi_read_timeout 300;
    }
  }
}';
  //fastcgi_param PHP_VALUE session.cookie_domain=.__NODENAME__; not currently used
}